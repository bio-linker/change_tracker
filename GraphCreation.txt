If I had to implement something today, what would I do?

1. Set an order for the Darwin Core terms and the rest of external fields.
2. For every record,
	2.1. s ← Concatenate the values in order 1
	2.2. hash ← sha256(s)
	2.3. save (hash, values)
3. Build a graph per Darwin Core term (no graph for external fields)
	3.1. Node or Vertex	
        - Value
        - Incidence: Number of records with this value.
        - List of records with Term = Value. List of hashes
            - This ~doubles the space required for the graph. 256 bytes per value.
        - List of n edges to the most similar values
            - Damerau Levenshtein similarity (No semantic relationship)
    3.2. Edge:
        - Node's reference
        - DL Similarity


Record insertion (Graph construction):
0. hash ← Concatenate( record ) 
1. For each DC Term:
    1.1. If Value is empty or null:
    1.2.    pass
    1.3. else:
    1.4.    node ← search ( Value )
    1.5.    if node is null:
    1.6.        node ← Add_Node ( Value )
    1.7.    else:
    1.8.        add_hash ( hash )
    1.9.    list_candidates = get_hashes( node )
    1.10.   return( list_candidates )

2. Duplicate_candidates ← Find the hashes that appear in the insertion of more than X terms
    i.e. hashes with more than 7 similar term/values.
             

Add_Node (Value):
- For every node (value) in the graph: (this can be run in parallel)
    - Compute the DL similarity to the new Value 
    - If the similarity is higher than the n-th one  (Existent node)
        Replace that link with the new Node and the computed similarity
    - If the similarity is higher than the n-th one (New node)
        Replace that link with the this Node and the computed similarity


